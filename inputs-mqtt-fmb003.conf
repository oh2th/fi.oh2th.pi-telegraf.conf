# Telegraf Configuration
#

###############################################################################
# Read metrics from FMB MQTT topic(s) for GPS and telemetry data
[[inputs.mqtt_consumer]]
  client_id = "telegraf-input-mqtt-fmb"

  username = "@{telegraf_secrets:mqtt_username}"
  password = "@{telegraf_secrets:mqtt_password}"

  servers = ["tcp://localhost:1883"]
  topics = [
    "teltonika/+/+/data",
  ]

  # Don't store the topic to influx
  topic_tag = ""

  data_format = "json_v2"

  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "teltonika/+/+/data"
    measurement = "measurement/_/_/_"
    tags = "_/model/imei/_"

  [[inputs.mqtt_consumer.json_v2]]
    # GPS and telemetry metrics
    [[inputs.mqtt_consumer.json_v2.object]]
      path = "state.reported"
      timestamp_key = "ts"
      timestamp_format = "unix_ms"
      # Tags
      # 21 = GSM Signal Strength (0 =< -111 or not known/not detectable, 1 < -101, 2 < -93, 3 < -83, 4 < -73, 5 >= -73)
      # 69 = GNSS Status (0 = OFF, 1 = ON with fix, 2 = ON without fix, 3 = Sleep)
      # 80 = Data Mode (0 = Home On Stop, 1 = Home On Moving, 2 = Roaming On Stop, 3 = Roaming On Moving, 4 = Unknown On Stop, 5 = Unknown On Moving)
      # 200 = Sleep Mode (0 = No Sleep, 1 = GPS Sleep, 2 = Deep Sleep, 3 = Online Sleep, 4 = Ultra Sleep)
      # 239 = Ignition (0 = Off, 1 = On)
      # 240 = Movement (0 = Off, 1 = On)
      # 256 = VIN (Vehicle Identification Number)
      # 303 = Instant Movement (0 = No Movement, 1 = Movement)
      # 383 = Acceleration Calibration Status (0 = Not calibrated, 1 = Calibrated)
      # 387 = GPS Location (+Lat+Lng+Speed/)
      # latlng = Latitude, Longitude
      tags = ["21", "69", "80", "200", "239", "240", "256", "303", "383", "387", "latlng"]
      included_keys = ["12", "13", "15", "16", "17", "18", "19", "24", "30", "31", "32", "36", "37", "51", "57", "66", "67", "68", "113", "181", "182", "199", "200", "205", "206", "241", "389", "410", "411", "449", "543", "544", "755", "1152", "ts", "pr", "alt", "ang", "sat", "sp", "evt"]

      [inputs.mqtt_consumer.json_v2.object.fields]
        "12" = "float"   # Fuel Used GPS (ml)
        "13" = "float"   # Fuel Rate GPS (cl/100 km)
        "15" = "float"   # Eco Score (factor 0.01)
        "16" = "float"   # Total Odometer by FMB GPS (m)
        "17" = "float"   # X-axis Acceleration (mG)
        "18" = "float"   # Y-axis Acceleration (mG)
        "19" = "float"   # Z-axis Acceleration (mG)
        "24" = "float"   # GNSS Speed (km/h)
        "30" = "int"   # Number of DTC - Detected Error Codes
        "31" = "int"   # Engine Load (%)
        "32" = "float"   # Coolant Temperature (°C)
        "36" = "float"   # Engine RPM
        "37" = "float"   # Vehicle Speed (km/h)
        "51" = "float"   # Control Module Voltage (mV)
        "57" = "float"   # Hybrid Battery Pack Remaining Life (%)
        "66" = "float"   # External Voltage as Measured by FMB (mV)
        "67" = "float"   # FMB Internal Battery Voltage (mV)
        "68" = "float"   # FMB Internal Battery Current (mA)
        "113" = "int"  # Battery Level (%)
        "181" = "float"  # GNSS PDOP (Divide by 10)
        "182" = "float"  # GNSS HDOP (Divide by 10)
        "199" = "float"  # Trip Odometer (m)
        "205" = "int"  # GSM Cell ID
        "206" = "int"  # GSM Area Code
        "241" = "int"  # Active GSM Operator (MNC + MNI)
        "389" = "float"  # Vehicle Odometer Value (km)
        "410" = "int"  # OEM Battery Charge State (0 = Not Charging, 1 = Charging)
        "411" = "int"  # OEM Battery Charge Level (%)
        # "412" = "float"  # Unknown - not selected as it is unknown
        "449" = "float"  # Ignition On (s)
        "543" = "float"  # Hybrid System Voltage (V)
        "544" = "float"  # Hybrid System Current (A)
        "755" = "float"  # Range Remaining (km)
        "1152" = "float" # OEM Battery Temperature (°C)
        "ts" = "float"   # Timestamp
        "pr" = "float"   # (?)
        "alt" = "int"  # Altitude (m)
        "ang" = "int"  # Angle (°)
        "sat" = "int"  # Satellites in use
        "sp" = "float"   # Speed (km/h)
        "evt" = "int"    # Event ID

###############################################################################
# Rename numeric field names to meaningful names
[[processors.rename]]
  [[processors.rename.replace]]
    field = "12"
    dest = "gps_fuel_used"
  [[processors.rename.replace]]
    field = "13"
    dest = "gps_fuel_rate"
  [[processors.rename.replace]]
    field = "15"
    dest = "eco_score"
  [[processors.rename.replace]]
    field = "16"
    dest = "gps_total_odometer_m"
  [[processors.rename.replace]]
    field = "17"
    dest = "acceleration_x"
  [[processors.rename.replace]]
    field = "18"
    dest = "acceleration_y"
  [[processors.rename.replace]]
    field = "19"
    dest = "acceleration_z"
  [[processors.rename.replace]]
    field = "21"
    dest = "gsm_signal_strength"
  [[processors.rename.replace]]
    field = "24"
    dest = "gnss_speed_kmh"
  [[processors.rename.replace]]
    field = "30"
    dest = "dtc_error_count"
  [[processors.rename.replace]]
    field = "31"
    dest = "engine_load_pct"
  [[processors.rename.replace]]
    field = "32"
    dest = "coolant_temp_c"
  [[processors.rename.replace]]
    field = "36"
    dest = "engine_rpm"
  [[processors.rename.replace]]
    field = "37"
    dest = "vehicle_speed_kmh"
  [[processors.rename.replace]]
    field = "51"
    dest = "control_module_voltage"
  [[processors.rename.replace]]
    field = "57"
    dest = "hybrid_battery_remaining_life_pct"
  [[processors.rename.replace]]
    field = "66"
    dest = "fmb_external_voltage"
  [[processors.rename.replace]]
    field = "67"
    dest = "fmb_internal_battery_voltage"
  [[processors.rename.replace]]
    field = "68"
    dest = "fmb_internal_battery_current"
  [[processors.rename.replace]]
    field = "69"
    dest = "gnss_status"
  [[processors.rename.replace]]
    field = "80"
    dest = "data_mode"
  [[processors.rename.replace]]
    field = "113"
    dest = "battery_level_pct"
  [[processors.rename.replace]]
    field = "181"
    dest = "gnss_pdop"
  [[processors.rename.replace]]
    field = "182"
    dest = "gnss_hdop"
  [[processors.rename.replace]]
    field = "199"
    dest = "trip_odometer_m"
  [[processors.rename.replace]]
    field = "200"
    dest = "sleep_mode"
  [[processors.rename.replace]]
    field = "205"
    dest = "gsm_cell_id"
  [[processors.rename.replace]]
    field = "206"
    dest = "gsm_area_code"
  [[processors.rename.replace]]
    field = "239"
    dest = "ignition"
  [[processors.rename.replace]]
    field = "240"
    dest = "movement"
  [[processors.rename.replace]]
    field = "241"
    dest = "active_gsm_operator"
  [[processors.rename.replace]]
    tag = "256"
    dest = "vin"
  [[processors.rename.replace]]
    field = "303"
    dest = "instant_movement"
  [[processors.rename.replace]]
    field = "383"
    dest = "acceleration_calibration_status"
  [[processors.rename.replace]]
    tag = "387"
    dest = "gps_location"
  [[processors.rename.replace]]
    field = "389"
    dest = "vehicle_odometer_km"
  [[processors.rename.replace]]
    field = "410"
    dest = "oem_battery_charge_state"
  [[processors.rename.replace]]
    field = "411"
    dest = "oem_battery_charge_level_pct"
  [[processors.rename.replace]]
    field = "449"
    dest = "ignition_on_s"
  [[processors.rename.replace]]
    field = "543"
    dest = "hybrid_system_voltage"
  [[processors.rename.replace]]
    field = "544"
    dest = "hybrid_system_current"
  [[processors.rename.replace]]
    field = "755"
    dest = "range_remaining_lm"
  [[processors.rename.replace]]
    field = "1152"
    dest = "oem_battery_temperature_c"
  [[processors.rename.replace]]
    field = "alt"
    dest = "altitude"
  [[processors.rename.replace]]
    field = "ang"
    dest = "angle"
  [[processors.rename.replace]]
    field = "sat"
    dest = "satellites"
  [[processors.rename.replace]]
    field = "sp"
    dest = "speed_kmh"
  [[processors.rename.replace]]
    field = "evt"
    dest = "event_id"

###############################################################################
# Extract latitude and longitude from 'latlng'
[[processors.starlark]]
  source = '''
def apply(metric):
  # Extract the latlng tag from the metric and remove it
  latlng = metric.tags.pop("latlng", None)
  if latlng != None:
    # Split the latlng string into latitude and longitude
    coords = latlng.split(",")
    if len(coords) == 2:
      metric.fields["latitude"] = float(coords[0])
      metric.fields["longitude"] = float(coords[1])
  return metric
'''

###############################################################################
# Process metrics using a Starlark script to convert specific fields to decimals
[[processors.starlark]]
  source = '''
def apply(metric):
  fields_to_convert = {
    "gps_fuel_used": 1000,
    "gps_fuel_rate": 100,
    "eco_score": 100,
    "fmb_external_voltage": 1000,
    "fmb_internal_battery_voltage": 1000,
    "fmb_internal_battery_current": 1000,
    "gnss_pdop": 10,
    "gnss_hdop": 10
  }

  for field in fields_to_convert:
    divisor = fields_to_convert[field]
    value = metric.fields.get(field)
    if value != None and type(value) in ("int", "float"):
      metric.fields[field] = value / divisor

  return metric
'''

###############################################################################
# Process metrics using a Starlark script to convert specific fields to meaningful names
[[processors.starlark]]
  source = '''
def apply(metric):
  mappings = {
    "gsm_signal_strength": {
      0: "<= -111",
      1: "< -101",
      2: "< -93",
      3: "< -83",
      4: "< -73",
      5: ">= -73"
    },
    "gnss_status": {
      0: "Off",
      1: "On with fix",
      2: "On without fix",
      3: "Sleep"
    },
    "data_mode": {
      0: "Home On Stop",
      1: "Home On Moving",
      2: "Roaming On Stop",
      3: "Roaming On Moving",
      4: "Unknown On Stop",
      5: "Unknown On Moving"
    },
    "sleep_mode": {
      0: "No Sleep",
      1: "GPS Sleep",
      2: "Deep Sleep",
      3: "Online Sleep",
      4: "Ultra Sleep"
    },
    "ignition": {
      0: "Off",
      1: "On"
    },
    "movement": {
      0: "Off",
      1: "On"
    },
    "instant_movement": {
      0: "No Movement",
      1: "Movement"
    },
    "acceleration_calibration_status": {
      0: "Not calibrated",
      1: "Calibrated"
    }
  }

  for field, map_dict in mappings.items():
    value = metric.fields.get(field)
    if value in map_dict:
      metric.fields[field] = map_dict[value]

  return metric
'''
