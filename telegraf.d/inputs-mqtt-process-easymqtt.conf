# Telegraf Configuration
#
###############################################################################

# Read metrics from MQTT topic(s) for OH2MP JSON formated ble data
[[inputs.mqtt_consumer]]
  client_id = "telegraf-input-mqtt-easymqtt"

  username = "@{telegraf_secrets:mqtt_username}"
  password = "@{telegraf_secrets:mqtt_password}"

  servers = ["tcp://localhost:1883"]
  topics = [ "ble/#" ]
  connection_timeout = "30s"

  topic_tag = ""

  data_format = "json_v2"
  name_override = "easymqtt"

  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "ble/+/+"
    tags = "_/source/sensor"

  [[inputs.mqtt_consumer.json_v2]]
    measurement_name = "easymqtt"
    [[inputs.mqtt_consumer.json_v2.object]]
      path = "@this"
      timestamp_key = "tst"
      timestamp_format = "unix"
      tags = ["type", "source", "sensor"]
      [inputs.mqtt_consumer.json_v2.object.fields]
        t = "float"
        rh = "int"
        ap = "int"
        bu = "float"
        e = "float"
        et = "float"
        lv = "int"
        u = "float"
        i = "float"
        p = "float"
        m = "int"
        s = "int"
        tt = "float"
        gh = "int"

  # Process metrics using a Starlark script to convert to useful units to be used with widgets
  [[processors.starlark]]
    namepass = ["easymqtt"]
    source = '''
def apply(metric):
  t = metric.fields.get("t")
  if t != None:
    metric.fields["t"] = t / 10
  bu = metric.fields.get("bu")
  if bu != None:
    metric.fields["bu"] = bu / 1000
  e = metric.fields.get("e")
  if e != None:
    metric.fields["e"] = e / 1000
  et = metric.fields.get("et")
  if et != None:
    metric.fields["et"] = et / 1000
  u = metric.fields.get("u")
  if u != None:
    metric.fields["u"] = u / 1000
  i = metric.fields.get("i")
  if i != None:
    metric.fields["i"] = i / 1000
  p = metric.fields.get("p")
  if p != None:
    metric.fields["p"] = p / 1000
  tt = metric.fields.get("tt")
  if tt != None:
    metric.fields["tt"] = tt / 10
  return metric
'''
