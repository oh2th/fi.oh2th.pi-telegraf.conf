# Telegraf Configuration
#
###############################################################################

[[inputs.mqtt_consumer]]
  client_id = "telegraf-input-mqtt-growatt"

  username = "@{telegraf_secrets:mqtt_username}"
  password = "@{telegraf_secrets:mqtt_password}"

  servers = ["tcp://localhost:1883"]
  topics = ["growatt"]
  qos = 0
  data_format = "json_v2"  # Using the json_v2 parser

  [[inputs.mqtt_consumer.json_v2]]
    measurement_name = "solar_pv"

    # Add tags from the JSON message
    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "values.datalogserial"
      rename = "datalogserial"
    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "values.pvserial"
      rename = "pvserial"

    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pvstatus"
      type = "integer"
      rename="pvstatus"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pvpowerin"
      type = "float"
      rename="pvpowerin"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pv1voltage"
      type = "float"
      rename="pv1voltage"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pv1current"
      type = "float"
      rename="pv1current"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pv1watt"
      type = "float"
      rename="pv1watt"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pv2voltage"
      type = "float"
      rename="pv2voltage"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pv2current"
      type = "float"
      rename="pv2current"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pv2watt"
      type = "float"
      rename="pv2watt"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pvpowerout"
      type = "float"
      rename="pvpowerout"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pvfrequentie"
      type = "float"
      rename="pvfrequentie"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pvgridvoltage"
      type = "float"
      rename="pvgridvoltage"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pvgridvoltage2"
      type = "float"
      rename="pvgridvoltage2"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pvgridvoltage3"
      type = "float"
      rename="pvgridvoltage3"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.totworktime"
      type = "integer"
      rename="totworktime"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pvenergytoday"
      type = "float"
      rename="pvenergytoday"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pvenergytotal"
      type = "float"
      rename="pvenergytotal"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.epvtotal"
      type = "float"
      rename="epvtotal"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.epv1today"
      type = "float"
      rename="epv1today"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.epv1total"
      type = "float"
      rename="epv1total"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.epv2today"
      type = "float"
      rename="epv2today"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.epv2total"
      type = "float"
      rename="epv2total"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pvtemperature"
      type = "float"
      rename="pvtemperature"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pvipmtemperature"
      type = "float"
      rename="pvipmtemperature"


# Apply temperature conversion from unsigned to signed 16-bit
[[processors.starlark]]
  namepass = ["solar_pv"]
  source = '''
def apply(metric):
  # Convert pvtemperature from unsigned int to signed int
  if 'pvtemperature' in metric.fields:
    value = metric.fields['pvtemperature']
    if value >= 32768:
      metric.fields['pvtemperature'] = (value - 65536) / 10  # Convert to signed
    else:
      metric.fields['pvtemperature'] = value / 10

  # Convert pvipmtemperature from unsigned int to signed int
  if 'pvipmtemperature' in metric.fields:
    value = metric.fields['pvipmtemperature']
    if value >= 32768:
      metric.fields['pvipmtemperature'] = (value - 65536) / 10  # Convert to signed
    else:
      metric.fields['pvipmtemperature'] = value / 10

  # Fields to divide by 10
  fields_to_divide = [
    'pvpowerin', 'pv1voltage', 'pv1current', 'pv1watt', 'pv2voltage',
    'pv2current', 'pv2watt', 'pvpowerout', 'pvfrequentie', 'pvgridvoltage',
    'pvgridvoltage2', 'pvgridvoltage3', 'pvenergytoday', 'pvenergytotal',
    'epvtotal', 'epv1today', 'epv1total', 'epv2today', 'epv2total'
  ]

  # Divide each field in the list by 10
  for field in fields_to_divide:
    if field in metric.fields:
      metric.fields[field] /= 10  # Divide by 10

  return metric
'''

# Calculate derivative for each field (e.g., energy totals)
[[aggregators.derivative]]
  namepass = ["solar_pv"]
  period = "3600s"  # Flush data every 30 seconds

  ## Maximum rollovers to prevent issues with single measurements
  max_roll_over = 1

  ## Suffix to append for the resulting derivative field
  suffix = "_hourly_watt"

  ## Apply the derivative calculation to energy fields
  fieldinclude = ["pvenergytotal", "epvtotal", "epv1total", "epv2total"]

  ## Optional: Specify the field to compute the quotient (if required)
  # variable = "pvenergytotal"  # For example, if you wanted to calculate a derivative based on some other field

# Scale kWh/s to W (multiply by 3,600,000)
[[processors.scale]]
  namepass = ["solar_pv"]

  [[processors.scale.scaling]]
    fields = ["pvenergytotal_hourly_watt", "epvtotal_hourly_watt", "epv1total_hourly_watt", "epv2total_hourly_watt"]
    factor = 3600000.0  # Convert kWh/s to W
