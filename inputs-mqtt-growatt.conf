# Telegraf Configuration
#
###############################################################################

[[inputs.mqtt_consumer]]
  servers = ["tcp://localhost:1883"]
  topics = ["growatt"]
  qos = 0
  data_format = "json_v2"  # Using the json_v2 parser

  username = "${MQTT_USERNAME}"
  password = "${MQTT_PASSWORD}"

  [[inputs.mqtt_consumer.json_v2]]
    measurement_name = "solar_pv"

    # Add tags from the JSON message
    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "values.datalogserial"
      rename = "datalogserial"
    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "values.pvserial"
      rename = "pvserial"

    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pvstatus"
      type = "integer"
      rename="pvstatus"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pvpowerin"
      type = "float"
      rename="pvpowerin"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pv1voltage"
      type = "float"
      rename="pv1voltage"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pv1current"
      type = "float"
      rename="pv1current"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pv1watt"
      type = "float"
      rename="pv1watt"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pv2voltage"
      type = "float"
      rename="pv2voltage"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pv2current"
      type = "float"
      rename="pv2current"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pv2watt"
      type = "float"
      rename="pv2watt"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pvpowerout"
      type = "float"
      rename="pvpowerout"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pvfrequentie"
      type = "float"
      rename="pvfrequentie"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pvgridvoltage"
      type = "float"
      rename="pvgridvoltage"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pvgridvoltage2"
      type = "float"
      rename="pvgridvoltage2"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pvgridvoltage3"
      type = "float"
      rename="pvgridvoltage3"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.totworktime"
      type = "integer"
      rename="totworktime"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pvtemperature"
      type = "float"
      rename="pvtemperature"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "values.pvipmtemperature"
      type = "float"
      rename="pvipmtemperature"

# Scale values (divide by 10)
[[processors.scale]]
  namepass = ["solar_pv"]

  [[processors.scale.scaling]]
    factor = 0.1
    fields = [
      "pvpowerin", "pv1voltage", "pv1current", "pv1watt", "pv2voltage",
      "pv2current", "pv2watt", "pvpowerout", "pvfrequentie", "pvgridvoltage",
      "pvgridvoltage2", "pvgridvoltage3", "pvenergytoday", "pvenergytotal",
      "epvtotal", "epv1today", "epv1total", "epv2today", "epv2total",
      "pvtemperature", "pvipmtemperature"
    ]

# Calculate derivative for each field (e.g., energy totals)
[[aggregators.derivative]]
  namepass = ["solar_pv"]
  period = "300s"  # Flush data every 30 seconds

  ## Maximum rollovers to prevent issues with single measurements
  max_roll_over = 0

  ## Suffix to append for the resulting derivative field
  suffix = "_rate"

  ## Apply the derivative calculation to energy fields
  fieldinclude = ["pvenergytotal", "epvtotal", "epv1total", "epv2total"]

  ## Optional: Specify the field to compute the quotient (if required)
  # variable = "pvenergytotal"  # For example, if you wanted to calculate a derivative based on some other field
